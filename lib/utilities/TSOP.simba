(*
Type Set of Points (TSOP)
=========

Description:
  This file will provide functions for finding a set of points
  that is unique to an image

*)

{$include_once ../utilities/types.simba}

(*
TSOP
====

Example:
  var
    myItem : TSOP;
    loc : TPoint;

    myItem.mainColour := 2173229;
    myItem.AddPoint(6, 2, colour);

    loc := myItem.Find();
*)
Type
  TSOP = Record
    name : string;
    mainColour : integer;
    subPoints : array of TPointInfo;
  end;

(*
TSOP.AddPoint
================

Description:
  Add a subpoint to be checked

Paramaters:
  x       - x location relative to the main point
  y       - y location relative to the main point
  colour  - The colour of the subpoint

Example:
  myItem.AddPoint(5, 7, 2173229);
  myItem.AddPoint(-6, 2, 2173229);

*)
procedure TSOP.AddPoint(x, y, colour : integer);
begin
  // Add a new element to the array
  // Length(self.subPoints) is used as it returns the length of the array
  // (1 based).

  SetLength(self.subPoints, Length(self.subPoints) + 1);

  self.subPoints[Length(self.subPoints) - 1].x := x;
  self.subPoints[Length(self.subPoints) - 1].y := y;
  self.subPoints[Length(self.subPoints) - 1].colour := colour;

  end;

(*
TSOP.Find
============

Description:
  Find the main point, using the given sub points

Example:
  loc := myItem.Find();

  writeln(toString(loc.x));

*)
function TSOP.Find(x1, y1, x2, y2 : integer) : TPoint;
var
  i, j, count : integer;
  TPA : TPointArray;

begin

  // Find all main colours
  FindColors(TPA, self.mainColour, x1, y1, x2, y2);

  // Loop through all main points (i)
  for i := 0 to Length(TPA) - 1 do
  begin
    count := 0;

    // Loop through all sub points (j)
    for j := 0 to Length(self.subPoints) - 1 do
    begin

      // TPA[i].y - self.subPoints[j].y
      // This negative to make it relative to the main point and not 0,0

      if GetColor(TPA[i].x + self.subPoints[j].x, TPA[i].y - self.subPoints[j].y) = self.subPoints[j].colour then
      begin
        count := count + 1;
      end;

    end;

    if count = Length(self.subPoints) then
    begin
      //writeln('Item has been found: (' + toStr(TPA[i].x) + ', ' + toStr(TPA[i].y) + ')');
      result := [TPA[i].x, TPA[i].y];
      Exit
    end else
    begin
      result := [-1, -1]

    end;

  end;

end;






