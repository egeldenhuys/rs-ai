(*
lobby
=====

Description:
  Provides functions related to the login and lobby.

*)

{$include_once interfaces.simba}
{$include_once ../utilities/types.simba}
{$include_once ../core/keyboard.simba}

type
  Lobby = TRSInterface;

(*
Lobby.IsAtLogin
===============

Description:
    Checks if the login screen is open

Parameters:
    None.

Return
    True  - if the login screen is open
    False - if the login screen is not open

Notes:
    ...

Example:
    if NOT AtLogin() then
      exit;

*)
function Lobby.IsAtLogin() : boolean
// Static colours and coordinates used to identify the login screen
const
  POINT_A : TPointInfo = [347, 387, 4507643];
  POINT_B : TPointInfo = [666, 99, 5302014];
  POINT_C : TPointInfo = [276, 244, 16777215];

begin
  result := false;

  // Check for each colour
  if GetColor(POINT_A.x, POINT_A.y) = POINT_A.colour then
    if GetColor(POINT_B.x, POINT_B.y) = POINT_B.colour then
      if GetColor(POINT_C.x, POINT_C.y) = POINT_C.colour then
      begin
        result := true;
        writeln('AtLogin(): True.');
      end

end;

(*
TBox.GetRandomPoint
===================

Import from SRL-6

*)
function TBox.GetRandomPoint: TPoint;
begin
  result.X := randomRange(self.x1, self.x2);
  result.Y := randomRange(self.y1, self.y2);
end;

(*
Lobby.Login
===========

Description:
  Enters the username and password into the text fields and
  logs the account in

Parameters:
  username - The coount username
  password - The account password

Notes:
  See improvements below.

Improvements:
  Can be improved by first checking if there is text already in the
  field.

Example:
    Login(username, password);

*)
procedure Lobby.Login(username, password : string)
// Static coordiantes for the text fields
const
  TB_USER : TBox = [272, 255, 520, 277];
  TB_PASS : TBox = [174, 330, 522, 347];

var
  i : integer = 0;
  timeStart, timeDiff : integer;
  loggedIn : boolean;

begin

  if self.IsAtLobby() = true then
  begin
    writeln('TLobby.Login(): Already at the lobby');
    exit;
  end;

  if self.IsAtLogin() = false then
  begin
    writeln('TLobby.Login(): Not at the login screen. Exiting');
    exit;
  end;

  writeln('EnterDetails(): Entering account details...');

  Mouse(TB_USER.GetRandomPoint().X, TB_USER.GetRandomPoint().Y, MOUSE_LEFT, 10);

  TypeText(username, true);
  TypeText(password, true);

  writeln('AtLogin(): Account details sent, waiting for Lobby to open...');
  timeStart := GetSystemTime();
  timeDiff := 0;
  loggedIn := false;

  while timeDiff < 10000 do
  begin
    wait(RandomRange(500, 2000));

    if self.IsAtLobby() then
    begin
      writeln('AtLogin(): Succesfully logged in.');
      loggedIn := true;
      break;
    end;

    if self.IsAccountInvalid() then
    begin
      writeln('AtLogin(): Login Failed. Please Check account details');
      loggedIn := false;
      break;
    end;

    self.SkipEmailScreen();

    timeDiff := GetSystemTime() - timeStart;
  end;

  if loggedIn = false then
    writeln('AtLogin(): Failed to log in.');


end;

(*
Lobby.IsAtLobby
===============

Description:
  Detects if the lobby screen is open (The screen after logging in).

Returns:
  True - If the lobby was found
  False - If not found

Improvements that can be made:
  At the moment the world and options icons are used
  for the colour. Can be improved by looking at points unique to the
  lobby, but the same for each lobby tab.

*)
function Lobby.IsAtLobby() : boolean;
const
  POINT_A : TPointInfo = [114, 31, 379903];
  POINT_B : TPointInfo = [778, 35, 1451182];
  POINT_C : TPointInfo = [511, 15, 0];

begin
  result := false;

  if GetColor(POINT_A.x, POINT_A.y) = POINT_A.colour then
    if GetColor(POINT_B.x, POINT_B.y) = POINT_B.colour then
      if GetColor(POINT_C.x, POINT_C.y) = POINT_C.colour then
        begin
          writeln('IsAtLobby(): True');
          result := true;
        end;

end;

// Lobby tab IDs
const
LOBBY_TAB_PLAYER_INFO = 0;
LOBBY_TAB_WORLD_SELECT = 1;
LOBBY_TAB_FRIENDS = 2;
LOBBY_TAB_FRIENDS_CHAT = 3;
LOBBY_TAB_CLAN_CHAT = 4;
LOBBY_TAB_OPTIONS = 5;

(*
Lobby.SelectTab
===============

Description:
  Click on the specified tab in the lobby.

Paramaters:
  tabID : the ID of the tab to click

Notes:
  Will only run if already in the lobby.

Example:
  Lobby.SelectTab(LOBBY_TAB_PLAYER_INFO);

*)
procedure Lobby.SelectTab(tabID : integer);
var
  btnArray : array[0..5] of TRSButton;

const
  // Set the button coordinates
  btnPlayerInfo  : TRSButton = [51, 119, 125, 130];
  btnWorldSelect : TRSButton = [156, 119, 239, 130];
  btnFriends     : TRSButton = [271, 119, 323, 130];
  btnFriendsChat : TRSButton = [348, 119, 434, 130];
  btnClanChat    : TRSButton = [459, 119, 531, 130];
  btnOptions     : TRSButton = [557, 119, 611, 130];

begin
  // Assign the buttons to an array. This makes it easier
  // to call their function based on the given ID.
  // No need for a switch statement
  btnArray[0] := btnPlayerInfo;
  btnArray[1] := btnWorldSelect;
  btnArray[2] := btnFriends;
  btnArray[3] := btnFriendsChat;
  btnArray[4] := btnClanChat;
  btnArray[5] := btnOptions;

  if self.IsAtLobby() = false then
    writeln('Lobby.SelectTab(): Not at the lobby');

  btnArray[tabID].Click();
  wait(RandomRange(500, 1200));

end;
(*
Lobby.Play
==========

Description:
  If the lobby is open it clicks the play button

Example:
  Lobby.Login(username, password);
  Lobby.Play();

*)
procedure Lobby.Play();
var
  btnPlay : TRSButton = [288, 514, 504, 546];

begin

  if self.IsAtLobby() = false then
  begin
    writeln('Lobby.Play(): Not at lobby. Exiting.');
    exit;
  end;

  self.SelectTab(LOBBY_TAB_PLAYER_INFO);
  btnPlay.Click();

end;

(*
Lobby.Close
===========

Description:
  If at the lobby it will click the close button

Example:
  Lobby.Close();

*)
procedure Lobby.Close()
var
  btnClose : TRSButton = [766, 27, 777, 42];

begin
  if self.IsAtLobby() = false then
  begin
    writeln('Lobby.Close(): Not at Lobby. Exiting function.');
    Exit;
  end;

  btnClose.Click();

end;

(*
Lobby.IsAccountInvalid
======================

Description:
  Checks if the Invalid Passoword screen is visible.
  If true it clicks 'retry' and clears the fields

*)
function Lobby.IsAccountInvalid() : boolean;
var
  btnRetry : TRSButton = [318, 412, 478, 433];

const
  POINT_A : TPointInfo = [399, 184, 7920629];
  POINT_B : TPointInfo = [314, 210, 2365698];
  POINT_C : TPointInfo = [465, 284, 16777215];

begin
  result := false;

  if GetColor(POINT_A.x, POINT_A.y) = POINT_A.colour then
    if GetColor(POINT_B.x, POINT_B.y) = POINT_B.colour then
      if GetColor(POINT_C.x, POINT_C.y) = POINT_C.colour then
        begin
          writeln('InvalidAccount(): True');
          result := true;
        end else
          writeln('InvalidAccount(): False');

  if result = True then
  begin
    btnRetry.Click();
    wait(RandomRange(400, 2000));

    Lobby.ClearFields();

  end;

end;

(*
Lobby.SkipEmailScreen()
=======================

Description:
  If the email validation screen is open it clicks 'skip'

*)

Procedure Lobby.SkipEmailScreen();
var
  btnRetry : TRSButton = [359, 416, 437, 437];

const
  POINT_A : TPointInfo = [271, 54, 376302];
  POINT_B : TPointInfo = [532, 174, 200894];
  POINT_C : TPointInfo = [191, 405, 2432008];

begin

  if GetColor(POINT_A.x, POINT_A.y) = POINT_A.colour then
    if GetColor(POINT_B.x, POINT_B.y) = POINT_B.colour then
      if GetColor(POINT_C.x, POINT_C.y) = POINT_C.colour then
        begin
          writeln('SkipEmailScreen(): Skipping...');
          btnRetry.Click();
        end;

end;

(*
Lobby.ClearFields()
===================

Desciption:
  This procedure clears the input fields on the login screen.

  Rough and cheap implementation

*)
Procedure Lobby.ClearFields()
var
  btnUser : TRSButton = [496, 258, 519, 275];
  btnPass : TRSButton = [497, 330, 520, 349];
  i : integer;

begin

  writeln('ClearFields(): Clearing Input fields for login...');

  for i := 0 to 1 do
  begin
    btnUser.Click();
    wait(RandomRange(200, 600));

    KeyDown(KEY_BACKSPACE);
    wait(RandomRange(2000, 4000));
    KeyUp(KEY_BACKSPACE);
  end;

  for i := 0 to 1 do
  begin
    btnPass.Click();
    wait(RandomRange(200, 600));

    KeyDown(KEY_BACKSPACE);
    wait(RandomRange(2000, 4000));
    KeyUp(KEY_BACKSPACE);
  end;

  btnUser.Click();

end;




