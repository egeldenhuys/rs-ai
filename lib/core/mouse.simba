(*
mouse
=====

Description:
	Provides functions for moving and clicking the mouse.
*)

(*
SimpleMouse (Success)
===========

Description:
  This procedure moves the mouse to the given coordinates.
  It does so by moving it first in the x axis until it matches the target x value.
  And then does the same for the y axis.

Parameters:
  x     - The target x coordinate
  Y     - The target y coordinate
  size  - How many pixels to move the mouse each increment.
  sleep - How long to wait before moving the mouse again

Remarks:
  When the mouse is moved by hand it does not reach the destination.
  It stops once it has moved a certain amount.

Example:
  SimpleMouse(800, 600, 5, 5);

*)

procedure SimpleMouse(x, y, size, sleep : integer);
var
  mouseX, MouseY : Integer; // The current mouse position
  distX, distY : Integer;   // The distance to move in each axis
  i : Integer;              // Loop counter for moving the mouse
  inc : Integer;            // The negative or positive value of size

begin
  (* Plan
    The first prototype will simply move the mouse 1 pixel at a time until
    the axis matches the given axis.
  *)

  // Get the initial mouse position for use in distance calculations
  GetMousePos(mouseX, MouseY);

  // Check how far we have to travel in each axis
  // We need to divide by the size to find how many times we need to move
  // the mouse by size amount.
  distX := Round((x - MouseX) / size);
  distY := Round((y - MouseY) / size);

  // == X Axis ==

  // Determine the direction
  if distX < 0 then
    inc := -size
  else
    inc := size

  // Move in the x axis until we are at the defined x position
  for i := 0 to Abs(distX) do
  begin

    // We need the new position and use it as the reference point
    // for the next movement
    GetMousePos(mouseX, MouseY);

    MoveMouse(mouseX + inc, MouseY);
    wait(sleep);

  end;

  // == Y Axis ==

  // Determine the direction
  if distY < 0 then
    inc := -size
  else
    inc := size

  // Move in the y axis until we are at the defined y position
  for i := 0 to Abs(distY) do
  begin

    // We need the new position and use it as the reference point
    // for the next movement
    GetMousePos(mouseX, MouseY);

    MoveMouse(mouseX, MouseY + inc);
    wait(sleep);

  end;

end;

(*
DiagMouse (FAIL)
=========

Description:
  This procedure attempts to move the mouse directly to the target
  i.e both axis at the same time. It is not very succesfull.

Remarks:
  The move function looks very good even while moving the mouse by hand.

*)

procedure DiagMouse_FAIL(x, y: integer; speed: extended);
var
  mouseX, mouseY : integer;
  distTotal : extended;
  distX, distY : extended;   // The distance to move in each axis
  time : extended;
  incX , incY : extended;
  i : integer;


begin

  // Get the current mouse position
  GetMousePos(mouseX, mouseY);

  // Calculate the distance in each axis
  distX := (x - MouseX);
  distY := (y - MouseY);

  // ** DEBUG **
  // writeln('distX: ' + toStr(distX));
  // writeln('distY: ' + toStr(distY));

  // Calculate the total distance
  distTotal := (sqrt(power(distX, 2) + power(distY, 2)));

  // ** DEBUG **
  // writeln('distTotal: ' + toStr(distTotal));

  // speed = dist / time
  // Calculate how long it must take for the mouse to move the total dist.
  time := distTotal * speed;

  // ** DEBUG **
  // writeln('time: ' + toStr(time));

  // We know how long the mouse will be moving (time)
  // Make the mouse move in the x axis for the amount of time

  // Calculate how far we have to move the mosue in each direction
  // for time to be at the target at the end.

  incX := (distX / time);
  incY := (distY / time);

  // ** DEBUG **
  // writeln('incX: ' + toStr(incX));
  // writeln('incY: ' + toStr(incY));

  for i := 0 to Ceil(time) do
  begin
    GetMousePos(mouseX, mouseY);
    MoveMouse(Floor(mouseX + incX), Floor(mouseY + incY));
    // ** DEBUG **
    //writeln('New Position: ' + toStr(Floor(mouseX + incX)) + ', ' + toStr(Floor(mouseY + incY)));
    wait(1);
  end;

end;

(*
EquationMouse (Success)
=============

Description:
  Finds the straight line equation from the current mouse position
  to the target. Every time it moves a set distance towards it.

Paramaters:
  x, y    - The target coordinates
  speed   - 'Speed = distance/time'
            How fast to move the mouse
Remarks:
  It it not possible to move the mouse by hand while this method is
  running. It would be required to recalculate the line equation
  when the mouse is no longer on the same line and this takes up resources.

Improvements that can be made:
  Move relative to the current mouse position. This way the mouse can be
  accidentally moved by hand and still look human.

Example:
  EquationMouse(500, 500, 10);

*)

procedure EquationMouse(x, y : integer; speed : extended);
var
mX, mY, i : integer;
time, distT, distX, incX, nextX, nextY, gradient : extended;

begin
  time := 1;
  i := 1;

  // **DEBUG** writeln('Mouse():');
  // **DEBUG** writeln('x, y = ' + toStr(x) + ', ' + toStr(y));
  // **DEBUG** writeln('Speed = ' + toStr(speed));

  GetMousePos(mX, mY);
  // **DEBUG** writeln('mX, mY = ' + toStr(mX) + ', ' + toStr(mY));

  // Distance to travel (Diagonal/Hypotenuse)
  distT := sqrt(power(mX - x, 2) + power(mY - y, 2));
  // **DEBUG** writeln('distT = ' + toStr(distT));

  // How long it must take to travel the total distance
  time := distT / speed;
  // **DEBUG** writeln('time = ' + toStr(time));

  // Get the distance in the x axis
  distX := abs(mX - x);
  // **DEBUG** writeln('distX = ' + toStr(distX));

  // By how much we increase in the x axis for every 1 time
  incX := distX / time;
  // **DEBUG** writeln('incX = ' + toStr(incX));

  //calculate the gradient
  if (mx - x) <= 0 then
    x := x - 10;

  gradient := (mY - y) / (mX - x);

  // **DEBUG** writeln('gradient = ' + toStr(gradient));

  // Direction
  if mX > x then
    incX := incX * -1;

  // Functions
  // x = f(t) = incX * t + mX
  // y = f(x) = mx + b

  for i := 0 to Round(time) do
  begin

    nextX := incX * i + mX;
    // **DEBUG** writeln('nextX = ' + toStr(nextX));

    nextY := gradient * nextX - gradient * mX + mY;
    // **DEBUG** writeln('nextY = ' + toStr(nextY));

    MoveMouse(Round(nextX), Round(nextY));

    wait(10);
    //i := i + 10;

  end;

end;

(*
RelativeMouse (Success)
=============

Description:
  Has similar behavior to EquationMouse. Moves in a straight line
  towards the target. The mouse can be moved by hand and it will
  look relatively normal, i.e not jumping the same as in EquationMouse.
  It will continue to move towards the target even when the mouse has
  been moved by hand. Each loop iteration it gets the next point
  to move to.

Paramaters:
  x, y    - The target coordinates
  speed   - 'Speed = distance/time'
            How fast to move the mouse

Remarks:
  The wait time between movements can still be tweaked.
  This method seems to work the best so far.
  The while loop can be improved to be more accurate.

Example:
  RelativeMouse(500, 500, 10);

*)
procedure RelativeMouse(x, y, speed : integer);
var
mX, mY, i : integer;
time, distT, distX, distY, incX, incY, nextX, nextY, gradient : extended;

begin
  // ** DEBUG ** writeln('Mouse():');
  // ** DEBUG ** writeln('x, y = ' + toStr(x) + ', ' + toStr(y));
  // ** DEBUG ** writeln('Speed = ' + toStr(speed));
  time := 3;

  while time > 2 do
  begin

  GetMousePos(mX, mY);
  // ** DEBUG ** writeln('mX, mY = ' + toStr(mX) + ', ' + toStr(mY));

  // Distance to travel (Diagonal/Hypotenuse)
  distT := sqrt(power(mX - x, 2) + power(mY - y, 2));
  // ** DEBUG ** writeln('distT = ' + toStr(distT));

  // How long it must take to travel the total distance
  time := distT / speed;
  // ** DEBUG ** writeln('time = ' + toStr(time));

  // Get the distance in the x axis
  distX := abs(mX - x);
  // ** DEBUG ** writeln('distX = ' + toStr(distX));

  // Get the distance in the y axis
  distY := abs(mY - y);
  // ** DEBUG ** writeln('distY = ' + toStr(distY));

  // By how much we increase in the x axis for every 1 time
  incX := distX / time;
  // ** DEBUG ** writeln('incX = ' + toStr(incX));

  // By how much we increase in the y axis for every 1 time
  incY := distY / time;
  // ** DEBUG ** writeln('incY = ' + toStr(incY));

  // Direction
  if mX > x then
    incX := -incX;

  if mY > y then
    incY := -incY;

  wait(10);
  GetMousePos(mX, mY);

  MoveMouse(mX + Round(incX), mY + Round(incY));
  end;

end;

(*
RandomSpeedMouse (Success)
================
Aim:
  Add variation to the speed and point movement.

Description:
  Improvement on RelativeMouse.

*)

procedure RandomSpeedMouse(x, y : integer; speed : extended);
var
mX, mY, i : integer;
time, distT, distX, distY, incX, incY, nextX, nextY, speedOrig : extended;

begin
  // ** DEBUG ** writeln('Mouse():');
  // ** DEBUG ** writeln('x, y = ' + toStr(x) + ', ' + toStr(y));
  // ** DEBUG ** writeln('Speed = ' + toStr(speed));

  time := 3;
  speedOrig := speed / 2;
  distT := 1;

  while time > 2 do
  begin

    speed := speedOrig - RandomRange(-Round(speedOrig), Round(speedOrig / 2));

    GetMousePos(mX, mY);

    // ** DEBUG ** writeln('mX, mY = ' + toStr(mX) + ', ' + toStr(mY));

    distT := sqrt(power(mX - x, 2) + power(mY - y, 2));

    // ** DEBUG ** writeln('distT = ' + toStr(distT));

    time := distT / speed;

    // ** DEBUG ** writeln('time = ' + toStr(time));

    distX := abs(mX - x);

    // ** DEBUG ** writeln('distX = ' + toStr(distX));

    distY := abs(mY - y);

    // ** DEBUG ** writeln('distY = ' + toStr(distY));

    incX := distX / time + RandomRange(0, Round(time / 30)) + randomRange(-2, 2);

    // ** DEBUG ** writeln('incX = ' + toStr(incX));

    incY := distY / time + RandomRange(0, Round(time / 30)) + randomRange(-2, 2);

    // ** DEBUG ** writeln('incY = ' + toStr(incY));

    // Direction
    if mX > x then
      incX := -incX;

    if mY > y then
      incY := -incY;

    wait(RandomRange(0, 5));
    GetMousePos(mX, mY);

    MoveMouse(mX + Round(incX), mY + Round(incY));
  end;
end;

// Mouse click constants
const
  MOUSE_MOVE = -1;

(*
Mouse (Final)
=====

Description:
  Moves to mouse to the target and optionally clicks a mouse button. 

Paramaters:
  x, y    - The target coordinates
  click   - Which mouse button to click at the target.
              MOUSE_LEFT
              MOUSE_RIGHT
              MOUSE_MOVE
  speed   - How fast to move the mouse
            (speed = distance / time)

Notes:
  Movement is randomised along the way.
  Speed is also randomised to a certain extent.
  Has similar behavior to EquationMouse. The next location is found
  relative to the current location.

Example:
  Mouse(100, 300, MOUSE_LEFT, 5);
  
*)

procedure Mouse(x, y, click : integer; speed : extended);
var
mX, mY, i : integer;
time, distT, distX, distY, incX, incY, nextX, nextY, speedOrig : extended;

begin
  // ** DEBUG ** writeln('Mouse():');
  // ** DEBUG ** writeln('x, y = ' + toStr(x) + ', ' + toStr(y));
  // ** DEBUG ** writeln('Speed = ' + toStr(speed));

  speedOrig := speed / 2;

  // Set initial values to avoid errors
  GetMousePos(mX, mY);
  distT := sqrt(power(mX - x, 2) + power(mY - y, 2));
  speed := speedOrig - RandomRange(-Round(speedOrig), Round(speedOrig / 2));
  time := distT / speed;

  while time > 2 do
  begin

    speed := speedOrig - RandomRange(-Round(speedOrig), Round(speedOrig / 2));

    GetMousePos(mX, mY);

    // ** DEBUG ** writeln('mX, mY = ' + toStr(mX) + ', ' + toStr(mY));

    distT := sqrt(power(mX - x, 2) + power(mY - y, 2));

    // ** DEBUG ** writeln('distT = ' + toStr(distT));

    time := distT / speed;

    // ** DEBUG ** writeln('time = ' + toStr(time));

    distX := abs(mX - x);

    // ** DEBUG ** writeln('distX = ' + toStr(distX));

    distY := abs(mY - y);

    // ** DEBUG ** writeln('distY = ' + toStr(distY));

    incX := distX / time + RandomRange(0, Round(time / 30)) + randomRange(-2, 2);

    // ** DEBUG ** writeln('incX = ' + toStr(incX));

    incY := distY / time + RandomRange(0, Round(time / 30)) + randomRange(-2, 2);

    // ** DEBUG ** writeln('incY = ' + toStr(incY));

    // Direction
    if mX > x then
      incX := -incX;

    if mY > y then
      incY := -incY;

    wait(RandomRange(0, 5));
    GetMousePos(mX, mY);

    MoveMouse(mX + Round(incX), mY + Round(incY));
  end;

  // This is to fix the mouse not actually moving until  t = 0
  wait(RandomRange(0, 5));
  MoveMouse(x, y);

  if click <> MOUSE_MOVE then
  begin
    // Click the mouse if it is specified
    wait(RandomRange(50, 100));
    ClickMouse(x, y, click);
  end;


end;





